# Telloom Development Instructions

## Project Overview

Telloom is a web application that connects generations by preserving and sharing personal histories through video. As an expert full-stack developer, your task is to assist in building this app using the following tech stack:

- TypeScript
- Next.js 15 (with App Router and React Server Components)
- Prisma ORM
- Supabase for backend and authentication
- Mux for video handling
- Tailwind CSS
- Shadcn UI components
- Lucide icons
- Zod for validation
- RevenueCat for managing subscriptions
- React Hook Form for efficient form handling and validation
- Zustand for lightweight and flexible state management
- Framer Motion for animations and interactive UI elements
- Sonner for Toast notifications

## Core Principles

1. **Simplicity**: Provide clear, step-by-step instructions suitable for newcomers to coding.
2. **Best Practices**: Ensure code is optimized, maintainable, and follows industry standards.
3. **User-Centric Design**: Focus on creating an intuitive and responsive user interface.
4. **Maximize React Compatibility**: Whenever possible write code that is more compatible with React.
## Code Style and Structure

### TypeScript Usage

- Use TypeScript for all code
- Prefer interfaces over types

### Programming Patterns

- Use functional and declarative programming patterns
- Avoid classes; prefer functional components with TypeScript interfaces
- Prioritize iteration and modularization over code duplication

### Naming Conventions

- Use descriptive variable names with auxiliary verbs (e.g., `isLoading`, `hasError`)
- Follow standard casing formats:
  - PascalCase for component names (e.g., `UserProfile`)
  - camelCase for variables and functions (e.g., `fetchData`)
  - kebab-case for directory and file names (e.g., `components/auth-wizard`)
  - UPPER_SNAKE_CASE for constants (e.g., `MAX_LIMIT`)

### Casing Standards

#### File & Directory Names
- **Component Files**: Use PascalCase for the file name to match the component name
  ```
  components/
  ├── UserProfile.tsx        ✓ Correct
  ├── userProfile.tsx        ✗ Incorrect
  └── user-profile.tsx       ✗ Incorrect
  ```

- **Directory Names**: Use kebab-case for all directories
  ```
  src/
  ├── components/
  │   ├── auth-wizard/       ✓ Correct
  │   ├── authWizard/       ✗ Incorrect
  │   └── AuthWizard/       ✗ Incorrect
  ```

- **Special Directories**: Next.js special directories should follow Next.js conventions
  ```
  app/
  ├── (authenticated)/      ✓ Correct (group directory)
  ├── [id]/                ✓ Correct (dynamic route)
  └── @modal/              ✓ Correct (parallel route)
  ```

#### Component Names
- **React Components**: Always PascalCase
  ```typescript
  // ✓ Correct
  export default function UserProfile() {}
  export const ButtonGroup = () => {}

  // ✗ Incorrect
  export default function userProfile() {}
  export const buttonGroup = () => {}
  ```

#### Variables & Functions
- **Variables**: camelCase
  ```typescript
  // ✓ Correct
  const userAge = 25;
  const isLoading = true;
  
  // ✗ Incorrect
  const UserAge = 25;
  const is_loading = true;
  ```

- **Functions**: camelCase
  ```typescript
  // ✓ Correct
  function calculateTotal() {}
  const handleSubmit = () => {}
  
  // ✗ Incorrect
  function CalculateTotal() {}
  const Handle_Submit = () => {}
  ```

#### Constants
- **Constants**: UPPER_SNAKE_CASE for true constants, camelCase for configuration objects
  ```typescript
  // ✓ Correct
  const MAX_RETRY_ATTEMPTS = 3;
  const API_ENDPOINT = '/api/v1';
  const defaultConfig = {
    timeout: 5000,
    retryCount: 3
  };
  
  // ✗ Incorrect
  const maxRetryAttempts = 3;
  const apiEndpoint = '/api/v1';
  const DEFAULT_CONFIG = {
    timeout: 5000,
    retryCount: 3
  };
  ```

#### Types & Interfaces
- **Types & Interfaces**: PascalCase
  ```typescript
  // ✓ Correct
  interface UserProfile {}
  type AuthState = {}
  
  // ✗ Incorrect
  interface userProfile {}
  type authState = {}
  ```

#### Component Props
- **Props**: camelCase for prop names, PascalCase for prop types
  ```typescript
  // ✓ Correct
  interface ButtonProps {
    isDisabled: boolean;
    onClick: () => void;
  }
  
  // ✗ Incorrect
  interface ButtonProps {
    IsDisabled: boolean;
    on_click: () => void;
  }
  ```

#### CSS Classes & Tailwind
- **Custom CSS Classes**: kebab-case
  ```css
  /* ✓ Correct */
  .user-profile {}
  .nav-link-active {}
  
  /* ✗ Incorrect */
  .userProfile {}
  .NavLinkActive {}
  ```

- **Tailwind Classes**: Follow Tailwind's conventions
  ```typescript
  // ✓ Correct
  className="text-sm md:text-base hover:bg-gray-100"
  
  // ✗ Incorrect
  className="TEXT_SM MD_TEXT_BASE HOVER_BG_GRAY_100"
  ```

#### Import Aliases
- **Import Aliases**: kebab-case for directories, match exact casing for files
  ```typescript
  // ✓ Correct
  import { Button } from '@/components/ui/Button';
  import { useAuth } from '@/lib/auth-utils';
  
  // ✗ Incorrect
  import { Button } from '@/Components/UI/button';
  import { useAuth } from '@/Lib/authUtils';
  ```

### File Structure

- Organize files with exported components, subcomponents, helpers, static content, and types
- Add a comment at the top of each file summarizing its purpose

```typescript
// auth-wizard.tsx
// This component handles user authentication flow

import React from 'react';
// ... rest of the code
```

## UI and Styling

- Use Tailwind CSS for styling
- Implement Shadcn UI components and Lucide icons
- Follow a mobile-first approach for responsive design
- Utilize Framer Motion for animations and interactive UI elements

```typescript
const Button = ({ children }) => (
  <button className="px-4 py-2 bg-blue-500 text-white rounded hover:bg-blue-600 transition-colors">
    {children}
  </button>
);
```

## Spacing Guidelines

### Global Content Wrapper
- Use the `container` class with `max-w-7xl` for main content areas
- Always include horizontal padding with `px-4` or `px-6`
- Include vertical padding with `py-6` or `py-8` for sections
- Center containers with `mx-auto`

### Spacing Scale
Follow a consistent 4px/8px spacing scale using Tailwind's spacing utilities:
- 4px (1): Minimal spacing (between tight elements)
- 8px (2): Small spacing (between related items)
- 16px (4): Medium spacing (between distinct elements)
- 24px (6): Large spacing (between sections)
- 32px (8): Extra large spacing (major sections)

### Component Spacing
- Cards/Modules:
  ```typescript
  // ✓ Correct - Consistent internal padding
  <Card className="p-6 md:p-8">
  
  // ✗ Incorrect - Inconsistent or missing padding
  <Card className="pt-4 pb-2 px-3">
  ```

- Lists and Grids:
  ```typescript
  // ✓ Correct - Consistent gaps
  <div className="grid gap-6 md:grid-cols-2">
  
  // ✗ Incorrect - Inconsistent spacing
  <div className="grid gap-3 md:gap-5">
  ```

### Responsive Spacing
- Use smaller spacing on mobile:
  ```typescript
  // ✓ Correct - Responsive padding
  className="p-4 md:p-6 lg:p-8"
  
  // ✗ Incorrect - Fixed padding
  className="p-8"
  ```

- Scale margins at breakpoints:
  ```typescript
  // ✓ Correct - Responsive margins
  className="mb-4 md:mb-6 lg:mb-8"
  
  // ✗ Incorrect - No responsive scaling
  className="mb-8"
  ```

### Visual Hierarchy
- Use consistent spacing between related elements:
  ```typescript
  // ✓ Correct - Consistent hierarchy
  <div className="space-y-2">  {/* tight grouping */}
    <Label>Name</Label>
    <Input />
  </div>
  <div className="space-y-4">  {/* related fields */}
    <FormField />
    <FormField />
  </div>
  <div className="space-y-8">  {/* distinct sections */}
    <Section />
    <Section />
  </div>
  ```

### Best Practices
- Always wrap main content in a container with edge padding
- Use consistent spacing within similar components
- Scale spacing at responsive breakpoints
- Use space-y-{size} for consistent vertical spacing
- Add larger spacing between major sections
- Ensure text and interactive elements have adequate padding
- Test layouts across different screen sizes

## Backend and Authentication

- Utilize Supabase for backend services and SSR authentication (NEVER use Supabase Auth Helpers - it's deprecated)
- Use Prisma ORM for database interactions
- Ensure database models align with Prisma schema

## Video Handling

- Implement Mux for video uploading, processing, and playback
- Integrate AI-powered transcription features as needed

## Subscription Management

- Use RevenueCat to manage user subscriptions

## State Management and Data Fetching

- Implement modern state management solutions (e.g., Zustand, React Query)
- Use Zod for data validation

```typescript
import { z } from 'zod';

const userSchema = z.object({
  id: z.string(),
  name: z.string().min(2),
  email: z.string().email(),
});

type User = z.infer<typeof userSchema>;
```

## Optimization and Best Practices

- Minimize use of 'use client', useEffect, and setState
- Favor React Server Components and Next.js SSR features
- Implement dynamic imports for code splitting
- Optimize images: use WebP format, include size data, implement lazy loading
- Focus on improving Web Vitals (LCP, CLS, FID)

## Error Handling and Validation

- Prioritize error handling and edge cases
- Use early returns and guard clauses
- Implement custom error types for consistent handling

```typescript
function processUserData(user: User | null): string {
  if (!user) {
    throw new Error('User data is missing');
  }

  if (!user.name) {
    return 'Anonymous';
  }

  return user.name.toUpperCase();
}
```

## Security and Performance

- Follow performance optimization techniques
- Ensure secure handling of user data and authentication flows

## Testing and Documentation

- Write unit tests using Jest and React Testing Library
- Provide clear comments for complex logic
- Use JSDoc comments for improved IDE IntelliSense

```typescript
/**
 * Formats a user's full name.
 * @param {string} firstName - The user's first name
 * @param {string} lastName - The user's last name
 * @returns {string} The formatted full name
 */
function formatFullName(firstName: string, lastName: string): string {
  return `${firstName} ${lastName}`.trim();
}
```

## Development Process

1. **Analysis**: Understand the task and its requirements by thinking step by step from first principles. Make a plan and consider where it might be going wrong contextually. Never be lazy in this process.
2. **Planning**: Outline the steps needed to accomplish the task, ensuring a thorough and thoughtful approach.
3. **Implementation**: Provide step-by-step guidance, maintaining clarity and precision.
4. **Review and Optimize**: Suggest potential improvements, considering both the current context and possible future challenges.
5. **Finalization**: Ensure the solution meets all requirements and best practices, with a focus on thoroughness and attention to detail.

Remember to approach each task with analytical rigor, break down problems into smaller parts, and consider multiple solutions before implementation. Always prioritize creating a supportive learning experience for newcomers to coding.

## Styling Guidelines

### Colors and Theme

- Primary brand colors:
  - Primary Green: `#1B4332` (dark green for primary actions and borders)
  - Secondary Green: `#8fbc55` (lighter green for hover states and shadows)
  - Use these consistently for brand identity

### Component Styling

- Card styling pattern:
  ```typescript
  className="border-2 border-[#1B4332] shadow-[6px_6px_0_0_#8fbc55] hover:shadow-[8px_8px_0_0_#8fbc55] transition-all duration-300"
  ```

- Button variants:
  - Primary: Dark green background with white text
  - Secondary: White background with dark green border
  - Ghost: Transparent with hover states
  - Always use rounded-full for buttons: `className="rounded-full"`

### Hover and Interactive States

- Use transition-all with duration-300 for smooth interactions
- Implement hover:bg-[#8fbc55] for interactive elements
- Use hover:text-[#1B4332] for text color changes on hover

### Layout and Spacing

- Use consistent spacing with Tailwind's spacing scale
- Maintain padding hierarchy:
  - Cards: p-4 to p-6
  - Buttons: px-4 py-2
  - Container margins: m-4
- Use flex and grid layouts appropriately:
  - flex for single-dimension layouts
  - grid for two-dimensional layouts

### Responsive Design

- Use mobile-first approach with Tailwind breakpoints
- Common pattern:
  ```typescript
  className="text-sm md:text-base lg:text-lg"
  ```
- Stack elements vertically on mobile, horizontally on desktop:
  ```typescript
  className="flex flex-col md:flex-row"
  ```

### Typography

- Use consistent font sizes:
  - Headings: text-xl to text-3xl
  - Body: text-sm to text-base
  - Labels: text-xs to text-sm
- Use font-semibold for headings and important text
- Use text-muted-foreground for secondary text

### Shadows and Depth

- Use consistent shadow patterns:
  ```typescript
  shadow-[6px_6px_0_0_#8fbc55]
  ```
- Increase shadow on hover for interactive elements

### Forms and Inputs

- Use consistent input styling:
  ```typescript
  className="border-2 border-gray-200 rounded-lg focus-visible:ring-[#8fbc55]"
  ```
- Always include proper labels and helper text
- Use consistent padding and spacing

### Loading States

- Use Loader2 component with animate-spin
- Maintain consistent loading state visuals:
  ```typescript
  className="h-8 w-8 animate-spin text-gray-400"
  ```

### Error States

- Use red-500 for error states
- Provide clear error messages
- Use toast notifications for feedback

### Accessibility

- Maintain proper contrast ratios
- Include proper ARIA labels
- Ensure keyboard navigation works
- Use semantic HTML elements

## Dynamic Route Parameters in Next.js Server Components

When working with dynamic route parameters in Next.js server components (e.g., [id] folders), follow these rules to properly handle the params object:

### 1. Make Layout Components Async

```typescript
export default async function DynamicLayout(props: Props) {
  const resolvedParams = await Promise.resolve(props.params);
  // ... use resolvedParams
}
```

### 2. Resolve Params Before Use

```typescript
// ✅ CORRECT: Await params before accessing properties
const resolvedParams = await Promise.resolve(params);
const id = resolvedParams.id;

// ❌ INCORRECT: Directly accessing params properties
const id = params.id; // Will cause warning
```

### 3. Pass Resolved Params to Children

```typescript
// ✅ CORRECT: Pass resolved params
<ChildComponent params={resolvedParams} />

// ❌ INCORRECT: Pass raw params
<ChildComponent params={params} />
```

### 4. Type Params Properly

```typescript
interface Props {
  params: {
    id: string;
    // Add other dynamic segments as needed
  };
}
```

### 5. Handle Params in Content Components

```typescript
async function PageContent({ params }: Props) {
  // Always resolve params first
  const resolvedParams = await Promise.resolve(params);
  const id = resolvedParams.id;
  
  // Use resolved value in queries/logic
  const { data } = await supabase
    .from('Table')
    .eq('id', id)
    .single();
}
```

## Common Patterns for Dynamic Routes

### 1. Layout Pattern

```typescript
export default async function Layout({ params, children }: Props) {
  const resolvedParams = await Promise.resolve(params);
  
  return (
    <Suspense fallback={<Loading />}>
      <LayoutContent params={resolvedParams}>
        {children}
      </LayoutContent>
    </Suspense>
  );
}
```

### 2. Page Pattern

```typescript
export default async function Page({ params }: Props) {
  const resolvedParams = await Promise.resolve(params);
  const id = resolvedParams.id;
  
  return (
    <Suspense fallback={<Loading />}>
      <PageContent id={id} />
    </Suspense>
  );
}
```

## Best Practices

1. Always use async/await with params
2. Resolve params at the earliest possible point
3. Pass resolved values down instead of raw params
4. Use consistent naming (resolvedParams) for clarity
5. Add proper TypeScript interfaces for params
6. Include error boundaries and loading states
7. Log resolved params for debugging

## Debugging Tips

```typescript
// Add debug logs to track params resolution
console.log('[DEBUG] Starting execution with params:', { resolvedParams });

// Use try/catch when resolving params
try {
  const resolvedParams = await Promise.resolve(params);
} catch (error) {
  console.error('Error resolving params:', error);
  notFound();
}
```

## Common Issues and Solutions

- **Issue 1: Params Promise Warning**  
  Solution: Always await Promise.resolve(params)

- **Issue 2: Undefined Properties**  
  Solution: Add proper TypeScript interfaces and null checks

- **Issue 3: Race Conditions**  
  Solution: Resolve params before any dependent operations

- **Issue 4: Client/Server Mismatch**  
  Solution: Use proper 'use client' directives and keep params handling server-side
