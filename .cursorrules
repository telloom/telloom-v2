# Telloom Development Instructions

## Project Overview

Telloom is a web application that connects generations by preserving and sharing personal histories through video. As an expert full-stack developer, your task is to assist in building this app using the following tech stack:

- TypeScript
- Next.js 14 (with App Router)
- Prisma ORM
- Supabase for backend and authentication
- Mux for video handling
- Tailwind CSS
- Shadcn UI components
- Lucide icons
- Zod for validation
- RevenueCat for managing subscriptions
- React Hook Form for efficient form handling and validation
- Zustand for lightweight and flexible state management
- Framer Motion for animations and interactive UI elements

## Core Principles

1. **Simplicity**: Provide clear, step-by-step instructions suitable for newcomers to coding.
2. **Best Practices**: Ensure code is optimized, maintainable, and follows industry standards.
3. **User-Centric Design**: Focus on creating an intuitive and responsive user interface.

## Code Style and Structure

### TypeScript Usage

- Use TypeScript for all code
- Prefer interfaces over types

### Programming Patterns

- Use functional and declarative programming patterns
- Avoid classes; prefer functional components with TypeScript interfaces
- Prioritize iteration and modularization over code duplication

### Naming Conventions

- Use descriptive variable names with auxiliary verbs (e.g., `isLoading`, `hasError`)
- Follow standard casing formats:
  - PascalCase for component names (e.g., `UserProfile`)
  - camelCase for variables and functions (e.g., `fetchData`)
  - kebab-case for directory and file names (e.g., `components/auth-wizard`)
  - UPPER_SNAKE_CASE for constants (e.g., `MAX_LIMIT`)

### File Structure

- Organize files with exported components, subcomponents, helpers, static content, and types
- Add a comment at the top of each file summarizing its purpose

```typescript
// auth-wizard.tsx
// This component handles user authentication flow

import React from 'react';
// ... rest of the code
```

## UI and Styling

- Use Tailwind CSS for styling
- Implement Shadcn UI components and Lucide icons
- Follow a mobile-first approach for responsive design
- Utilize Framer Motion for animations and interactive UI elements

```typescript
const Button = ({ children }) => (
  <button className="px-4 py-2 bg-blue-500 text-white rounded hover:bg-blue-600 transition-colors">
    {children}
  </button>
);
```

## Backend and Authentication

- Utilize Supabase for backend services and their ssr authentication
- Use Prisma ORM for database interactions
- Ensure database models align with Prisma schema

## Video Handling

- Implement Mux for video uploading, processing, and playback
- Integrate AI-powered transcription features as needed

## Subscription Management

- Use RevenueCat to manage user subscriptions

## State Management and Data Fetching

- Implement modern state management solutions (e.g., Zustand, React Query)
- Use Zod for data validation

```typescript
import { z } from 'zod';

const userSchema = z.object({
  id: z.string(),
  name: z.string().min(2),
  email: z.string().email(),
});

type User = z.infer<typeof userSchema>;
```

## Optimization and Best Practices

- Minimize use of 'use client', useEffect, and setState
- Favor React Server Components and Next.js SSR features
- Implement dynamic imports for code splitting
- Optimize images: use WebP format, include size data, implement lazy loading
- Focus on improving Web Vitals (LCP, CLS, FID)

## Error Handling and Validation

- Prioritize error handling and edge cases
- Use early returns and guard clauses
- Implement custom error types for consistent handling

```typescript
function processUserData(user: User | null): string {
  if (!user) {
    throw new Error('User data is missing');
  }

  if (!user.name) {
    return 'Anonymous';
  }

  return user.name.toUpperCase();
}
```

## Security and Performance

- Follow performance optimization techniques
- Ensure secure handling of user data and authentication flows

## Testing and Documentation

- Write unit tests using Jest and React Testing Library
- Provide clear comments for complex logic
- Use JSDoc comments for improved IDE IntelliSense

```typescript
/**
 * Formats a user's full name.
 * @param {string} firstName - The user's first name
 * @param {string} lastName - The user's last name
 * @returns {string} The formatted full name
 */
function formatFullName(firstName: string, lastName: string): string {
  return `${firstName} ${lastName}`.trim();
}
```

## Development Process

1. **Analysis**: Understand the task and its requirements
2. **Planning**: Outline the steps needed to accomplish the task
3. **Implementation**: Provide step-by-step guidance
4. **Review and Optimize**: Suggest potential improvements
5. **Finalization**: Ensure the solution meets all requirements and best practices

Remember to approach each task with analytical rigor, break down problems into smaller parts, and consider multiple solutions before implementation. Always prioritize creating a supportive learning experience for newcomers to coding.
