// utils/filename-helpers.ts\n// Utility functions for creating standardized filenames.\n\nimport { v4 as uuidv4 } from \'uuid\';\n\n// Define the Profile type structure expected by formatFilename\n// Adjust according to your actual Profile type if different\ninterface ProfileData {\n  firstName?: string | null;\n  lastName?: string | null;\n}\n\ninterface FormatFilenameArgs {\n  fileType: string; // e.g., \'mp4\', \'pdf\', \'jpg\'\n  muxAssetId?: string; // Optional Mux ID for uniqueness if needed\n  videoType?: \'prompt\' | \'topic\';\n  profile?: ProfileData | null;\n  topicName?: string | null;\n  promptTitle?: string | null; // Added for potential use with prompts\n  originalFilename?: string | null; // Added for attachments\n}\n\n// Helper function to slugify strings for filenames\n// Handles null/undefined/empty inputs gracefully.\nfunction slugify(text: string | null | undefined): string {\n  if (!text) return \'untitled\';\n  return text\n    .toString()\n    .toLowerCase()\n    .trim()\n    .replace(/\s+/g, \'-\')           // Replace spaces with -\n    .replace(/[^\w-]+/g, \'\')       // Remove all non-word chars except hyphen\n    .replace(/--+/g, \'-\')         // Replace multiple - with single -\n    .replace(/^-+/, \'\')           // Trim - from start of text\n    .replace(/-+$/, \'\');          // Trim - from end of text\n}\n\n/**\n * Generates a standardized, filesystem-safe filename.\n * Example: tully-joe_family-history_prompt_a8f3.mp4\n * Example: document_attachment_b4c1.pdf\n */\nexport function formatFilename({\n  fileType,\n  muxAssetId,\n  videoType,\n  profile,\n  topicName,\n  promptTitle,\n  originalFilename\n}: FormatFilenameArgs): string {\n\n  const lastName = slugify(profile?.lastName);\n  const firstName = slugify(profile?.firstName);\n  const safeTopicName = slugify(topicName);\n  const safePromptTitle = slugify(promptTitle);\n  const shortUuid = uuidv4().substring(0, 4); // Short unique identifier\n  const safeFileType = fileType.toLowerCase().replace(/[^a-z0-9]/g, \'\'); // Sanitize file type\n\n  let baseName = \'\';\n\n  // Prioritize video context if available\n  if (videoType && profile) {\n    if (videoType === \'topic\' && topicName) {\n      baseName = `${lastName}-${firstName}_${safeTopicName}_Topic`;\n    } else if (videoType === \'prompt\' && (topicName || promptTitle)) {\n      // Use topic name if available for prompts, otherwise prompt title\n      const context = topicName ? safeTopicName : safePromptTitle;\n      baseName = `${lastName}-${firstName}_${context}_Prompt`;\n    } else {\n      // Fallback if type is known but context is missing\n      baseName = `${lastName}-${firstName}_${videoType}`; \n    }\n  } else if (originalFilename) {\n      // Handle generic attachments using original name if possible\n      const nameWithoutExtension = originalFilename.split(\'.\').slice(0, -1).join(\'.\');\n      baseName = slugify(nameWithoutExtension) || \'attachment\';\n  } else {\n    // Generic fallback\n    baseName = \'telloom_file\';\n  }\n\n  // Ensure max length and add UUID + file type\n  const maxLength = 100; // Limit base name length\n  const truncatedBaseName = baseName.substring(0, maxLength);\n\n  return `${truncatedBaseName}_${shortUuid}.${safeFileType}`;\n}\n 