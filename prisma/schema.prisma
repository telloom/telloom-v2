generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
}

datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
  directUrl  = env("DIRECT_URL")
  extensions = [uuid_ossp(map: "uuid-ossp", schema: "extensions")]
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model Entitlement {
  id                      String                    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  revenuecatId            String
  lookupKey               String
  displayName             String
  createdAt               DateTime?                 @default(now()) @db.Timestamptz(6)
  updatedAt               DateTime?                 @default(now()) @db.Timestamptz(6)
  SubscriptionEntitlement SubscriptionEntitlement[]
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model Invitation {
  id                                    String           @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  sharerId                              String           @db.Uuid
  inviterId                             String?          @db.Uuid
  inviteeEmail                          String
  role                                  Role
  status                                InvitationStatus @default(PENDING)
  token                                 String           @unique
  createdAt                             DateTime         @default(now()) @db.Timestamptz(6)
  updatedAt                             DateTime         @db.Timestamptz(6)
  acceptedAt                            DateTime?
  executorFirstName                     String?
  executorLastName                      String?
  executorRelation                      String?
  executorPhone                         String?
  Profile_Invitation_inviterIdToProfile Profile?         @relation("Invitation_inviterIdToProfile", fields: [inviterId], references: [id], onDelete: Cascade)
  ProfileSharer                         ProfileSharer    @relation(fields: [sharerId], references: [id], onDelete: Cascade)

  @@unique([sharerId, inviteeEmail, role])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model Object {
  id                String          @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId            String?         @db.Uuid
  objectName        String
  objectDescription String?
  airtableRecordId  String?
  createdAt         DateTime?       @default(now()) @db.Timestamptz(6)
  updatedAt         DateTime?       @db.Timestamptz(6)
  promptResponseId  String?         @db.Uuid
  categoryId        String?         @db.Uuid
  ObjectCategory    ObjectCategory? @relation(fields: [categoryId], references: [id], onDelete: NoAction)
  PromptResponse    PromptResponse? @relation(fields: [promptResponseId], references: [id], onDelete: NoAction)
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model ObjectCategory {
  id               String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  categoryName     String
  description      String?
  airtableRecordId String?
  createdAt        DateTime? @default(now()) @db.Timestamptz(6)
  updatedAt        DateTime? @default(now()) @db.Timestamptz(6)
  Object           Object[]
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model Offering {
  id           String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  revenuecatId String
  lookupKey    String
  displayName  String
  isCurrent    Boolean
  createdAt    DateTime? @default(now()) @db.Timestamptz(6)
  updatedAt    DateTime? @default(now()) @db.Timestamptz(6)
  Package      Package[]
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model Package {
  id           String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  revenuecatId String
  offeringId   String?   @db.Uuid
  productId    String?   @db.Uuid
  lookupKey    String
  displayName  String
  position     Int?
  createdAt    DateTime? @default(now()) @db.Timestamptz(6)
  updatedAt    DateTime? @default(now()) @db.Timestamptz(6)
  Offering     Offering? @relation(fields: [offeringId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  Product      Product?  @relation(fields: [productId], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model Product {
  id              String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  revenuecatId    String
  storeIdentifier String
  type            String
  displayName     String?
  createdAt       DateTime?      @default(now()) @db.Timestamptz(6)
  updatedAt       DateTime?      @default(now()) @db.Timestamptz(6)
  Package         Package[]
  Purchase        Purchase[]
  Subscription    Subscription[]
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model Profile {
  id                                       String                          @id @db.Uuid
  fullName                                 String?
  username                                 String?                         @unique
  avatarUrl                                String?
  email                                    String?                         @unique
  passwordHash                             String?                         @unique
  firstName                                String?
  lastName                                 String?
  phone                                    String?
  revenuecatAppUserId                      String?
  status                                   String?
  airtableRecordId                         String?
  addressStreet                            String?
  addressUnit                              String?
  addressCity                              String?
  addressState                             String?
  addressZipcode                           String?
  executorFirstName                        String?
  executorLastName                         String?
  executorRelation                         String?
  executorPhone                            String?
  executorEmail                            String?
  isAdmin                                  Boolean                         @default(false)
  createdAt                                DateTime                        @default(now()) @db.Timestamptz(6)
  updatedAt                                DateTime                        @db.Timestamptz(6)
  FollowRequest                            FollowRequest[]
  Invitation_Invitation_inviterIdToProfile Invitation[]                    @relation("Invitation_inviterIdToProfile")
  Notification                             Notification[]
  ProfileExecutor                          ProfileExecutor[]
  ProfileListener                          ProfileListener[]
  ProfileRole                              ProfileRole[]
  ProfileSharer                            ProfileSharer?
  PromptResponseFavorite                   PromptResponseFavorite[]
  PromptResponseRecentlyWatched            PromptResponseRecentlyWatched[]
  TopicFavorite                            TopicFavorite[]
  TopicQueueItem                           TopicQueueItem[]
  TopicVideoDownload                       TopicVideoDownload[]
  VideoDownload                            VideoDownload[]
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model ProfileExecutor {
  id            String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  sharerId      String        @unique @db.Uuid
  executorId    String        @db.Uuid
  createdAt     DateTime      @default(now()) @db.Timestamptz(6)
  Profile       Profile       @relation(fields: [executorId], references: [id], onDelete: Cascade)
  ProfileSharer ProfileSharer @relation(fields: [sharerId], references: [id], onDelete: Cascade)
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model ProfileListener {
  id             String           @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  listenerId     String           @db.Uuid
  sharerId       String           @db.Uuid
  sharedSince    DateTime         @default(now()) @db.Timestamptz(6)
  hasAccess      Boolean          @default(true)
  lastViewed     DateTime?
  notifications  Boolean          @default(true)
  createdAt      DateTime         @default(now()) @db.Timestamptz(6)
  updatedAt      DateTime?        @db.Timestamptz(6)
  Profile        Profile          @relation(fields: [listenerId], references: [id], onDelete: Cascade)
  ProfileSharer  ProfileSharer    @relation(fields: [sharerId], references: [id], onDelete: Cascade)
  PromptResponse PromptResponse[] @relation("ListenerPromptViews")
  Video          Video[]          @relation("ListenerVideoViews")

  @@unique([listenerId, sharerId])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model ProfileRole {
  id        String   @id @db.Uuid
  profileId String   @db.Uuid
  role      Role
  createdAt DateTime @default(now()) @db.Timestamptz(6)
  updatedAt DateTime @default(now()) @db.Timestamptz(6)
  Profile   Profile  @relation(fields: [profileId], references: [id], onDelete: Cascade)

  @@unique([profileId, role])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model ProfileSharer {
  id                       String                     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  profileId                String                     @unique @db.Uuid
  subscriptionStatus       Boolean
  createdAt                DateTime                   @default(now()) @db.Timestamptz(6)
  FollowRequest            FollowRequest[]
  Invitation               Invitation[]
  PersonTag                PersonTag[]
  ProfileExecutor          ProfileExecutor?
  ProfileListener          ProfileListener[]
  Profile                  Profile                    @relation(fields: [profileId], references: [id], onDelete: Cascade)
  PromptResponse           PromptResponse[]
  PromptResponseAttachment PromptResponseAttachment[]
  TopicVideo               TopicVideo[]
  Video                    Video[]
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model Prompt {
  id                    String                   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  promptText            String                   @db.VarChar(255)
  promptType            String?                  @default("default") @db.VarChar(255)
  isContextEstablishing Boolean?                 @default(false)
  airtableId            String?                  @db.VarChar
  createdAt             DateTime?                @default(now()) @db.Timestamp(6)
  updatedAt             DateTime?                @default(now()) @db.Timestamp(6)
  promptCategoryId      String?                  @db.Uuid
  categoryAirtableId    String?                  @db.VarChar
  isObjectPrompt        Boolean?
  search_vector         Unsupported("tsvector")?
  PromptCategory        PromptCategory?          @relation(fields: [promptCategoryId], references: [id], onDelete: NoAction)
  PromptResponse        PromptResponse[]
  Video                 Video[]

  @@index([search_vector], map: "prompt_search_idx", type: Gin)
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model PromptCategory {
  id             String           @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  category       String?
  description    String?
  theme          Theme?
  airtableId     String?
  createdAt      DateTime?        @default(now()) @db.Timestamptz(6)
  updatedAt      DateTime?        @default(now()) @db.Timestamptz(6)
  Prompt         Prompt[]
  TopicFavorite  TopicFavorite[]
  TopicQueueItem TopicQueueItem[]
  TopicVideo     TopicVideo[]
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model PromptResponse {
  id                            String                          @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  profileSharerId               String                          @db.Uuid
  videoId                       String?                         @unique @db.Uuid
  privacyLevel                  String                          @default("Private")
  createdAt                     DateTime?                       @default(now()) @db.Timestamptz(6)
  updatedAt                     DateTime?                       @db.Timestamptz(6)
  airtableRecordId              String?
  promptId                      String?                         @db.Uuid
  search_vector                 Unsupported("tsvector")?
  summary                       String?
  responseNotes                 String?
  Object                        Object[]
  ProfileSharer                 ProfileSharer                   @relation(fields: [profileSharerId], references: [id], onDelete: Cascade)
  Prompt                        Prompt?                         @relation(fields: [promptId], references: [id], onDelete: NoAction)
  Video                         Video?                          @relation(fields: [videoId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  PromptResponseAttachment      PromptResponseAttachment[]
  PromptResponseFavorite        PromptResponseFavorite[]
  PromptResponseRecentlyWatched PromptResponseRecentlyWatched[]
  ResponsePermission            ResponsePermission[]
  ProfileListener               ProfileListener[]               @relation("ListenerPromptViews")
  ThematicVideo                 TopicVideo[]                    @relation("PromptResponseToThematicVideo")

  @@index([search_vector], map: "prompt_response_search_idx", type: Gin)
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model PromptResponseAttachment {
  id                                String                              @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  promptResponseId                  String                              @db.Uuid
  profileSharerId                   String                              @db.Uuid
  fileUrl                           String
  fileType                          String
  fileName                          String
  fileSize                          Int?
  title                             String?
  description                       String?
  estimatedYear                     Int?
  uploadedAt                        DateTime                            @default(now()) @db.Timestamptz(6)
  dateCaptured                      DateTime?                           @db.Date
  yearCaptured                      Int?
  ProfileSharer                     ProfileSharer                       @relation(fields: [profileSharerId], references: [id], onDelete: NoAction)
  PromptResponse                    PromptResponse                      @relation(fields: [promptResponseId], references: [id], onDelete: Cascade)
  PromptResponseAttachmentPersonTag PromptResponseAttachmentPersonTag[]
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model PromptResponseFavorite {
  id               String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  profileId        String         @db.Uuid
  promptResponseId String         @db.Uuid
  favoritedAt      DateTime       @default(now()) @db.Timestamptz(6)
  Profile          Profile        @relation(fields: [profileId], references: [id], onDelete: Cascade)
  PromptResponse   PromptResponse @relation(fields: [promptResponseId], references: [id], onDelete: Cascade)
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model PromptResponseRecentlyWatched {
  id               String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  profileId        String         @db.Uuid
  promptResponseId String         @db.Uuid
  watchedAt        DateTime       @default(now()) @db.Timestamptz(6)
  Profile          Profile        @relation(fields: [profileId], references: [id], onDelete: Cascade)
  PromptResponse   PromptResponse @relation(fields: [promptResponseId], references: [id], onDelete: Cascade)
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model Purchase {
  id                      String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  revenuecatId            String
  userId                  String?   @db.Uuid
  productId               String?   @db.Uuid
  purchasedAt             DateTime  @db.Timestamptz(6)
  store                   String
  revenueInUsd            Decimal   @db.Decimal
  status                  String
  environment             String
  storePurchaseIdentifier String?
  createdAt               DateTime? @default(now()) @db.Timestamptz(6)
  updatedAt               DateTime? @default(now()) @db.Timestamptz(6)
  Product                 Product?  @relation(fields: [productId], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model ResponsePermission {
  id              String          @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId          String?         @db.Uuid
  permissionLevel String
  createdAt       DateTime?       @default(now()) @db.Timestamptz(6)
  updatedAt       DateTime?       @default(now()) @db.Timestamptz(6)
  responseId      String?         @db.Uuid
  PromptResponse  PromptResponse? @relation(fields: [responseId], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model Subscription {
  id                          String                    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  revenuecatId                String
  userId                      String?                   @db.Uuid
  productId                   String?                   @db.Uuid
  startsAt                    DateTime                  @db.Timestamptz(6)
  currentPeriodStartsAt       DateTime                  @db.Timestamptz(6)
  currentPeriodEndsAt         DateTime?                 @db.Timestamptz(6)
  givesAccess                 Boolean
  autoRenewalStatus           String?
  status                      String
  store                       String
  environment                 String
  storeSubscriptionIdentifier String?
  createdAt                   DateTime?                 @default(now()) @db.Timestamptz(6)
  updatedAt                   DateTime?                 @default(now()) @db.Timestamptz(6)
  Product                     Product?                  @relation(fields: [productId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  SubscriptionEntitlement     SubscriptionEntitlement[]
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model SubscriptionEntitlement {
  id             String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  subscriptionId String       @db.Uuid
  entitlementId  String       @db.Uuid
  createdAt      DateTime?    @default(now()) @db.Timestamptz(6)
  updatedAt      DateTime?    @default(now()) @db.Timestamptz(6)
  Entitlement    Entitlement  @relation(fields: [entitlementId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  Subscription   Subscription @relation(fields: [subscriptionId], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model TopicFavorite {
  id               String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  profileId        String         @db.Uuid
  promptCategoryId String         @db.Uuid
  createdAt        DateTime       @default(now()) @db.Timestamptz(6)
  Profile          Profile        @relation(fields: [profileId], references: [id], onDelete: Cascade)
  PromptCategory   PromptCategory @relation(fields: [promptCategoryId], references: [id], onDelete: Cascade)

  @@unique([profileId, promptCategoryId])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model TopicQueueItem {
  id               String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  profileId        String         @db.Uuid
  promptCategoryId String         @db.Uuid
  createdAt        DateTime       @default(now()) @db.Timestamptz(6)
  Profile          Profile        @relation(fields: [profileId], references: [id], onDelete: Cascade)
  PromptCategory   PromptCategory @relation(fields: [promptCategoryId], references: [id], onDelete: Cascade)

  @@unique([profileId, promptCategoryId])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model Video {
  id               String            @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  profileSharerId  String            @db.Uuid
  muxAssetId       String?           @unique
  muxPlaybackId    String?           @unique
  muxUploadId      String?           @unique
  passthrough      String?           @unique
  duration         Float?
  aspectRatio      String?
  videoQuality     String?
  maxWidth         Decimal?          @db.Decimal
  maxHeight        Decimal?          @db.Decimal
  maxFrameRate     Decimal?          @db.Decimal
  languageCode     String?
  resolutionTier   String?
  airtableRecordId String?
  promptId         String?           @db.Uuid
  createdAt        DateTime?         @default(now()) @db.Timestamptz(6)
  updatedAt        DateTime?         @default(now()) @db.Timestamptz(6)
  status           VideoStatus       @default(WAITING)
  dateRecorded     DateTime?         @db.Timestamptz(6)
  PromptResponse   PromptResponse?
  ProfileSharer    ProfileSharer     @relation(fields: [profileSharerId], references: [id], onDelete: Cascade)
  Prompt           Prompt?           @relation(fields: [promptId], references: [id], onDelete: NoAction)
  VideoTranscript  VideoTranscript?
  ProfileListener  ProfileListener[] @relation("ListenerVideoViews")
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model VideoTranscript {
  id         String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  videoId    String   @unique @db.Uuid
  transcript String
  createdAt  DateTime @default(now()) @db.Timestamptz(6)
  updatedAt  DateTime @db.Timestamptz(6)
  source     String?
  type       String?
  language   String?
  name       String?
  muxTrackId String?
  muxAssetId String?
  Video      Video    @relation(fields: [videoId], references: [id], onDelete: Cascade)
}

model PersonTag {
  id                                String                              @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name                              String
  profileSharerId                   String                              @db.Uuid
  relation                          person_relation
  createdAt                         DateTime?                           @default(now()) @db.Timestamptz(6)
  updatedAt                         DateTime?                           @default(now()) @db.Timestamptz(6)
  ProfileSharer                     ProfileSharer                       @relation(fields: [profileSharerId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_person_tag_profile_sharer")
  PromptResponseAttachmentPersonTag PromptResponseAttachmentPersonTag[]
}

model PromptResponseAttachmentPersonTag {
  id                         String                   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  promptResponseAttachmentId String                   @db.Uuid
  personTagId                String                   @db.Uuid
  createdAt                  DateTime?                @default(now()) @db.Timestamptz(6)
  updatedAt                  DateTime?                @default(now()) @db.Timestamptz(6)
  PromptResponseAttachment   PromptResponseAttachment @relation(fields: [promptResponseAttachmentId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_attachment_tag_attachment")
  PersonTag                  PersonTag                @relation(fields: [personTagId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_attachment_tag_person_tag")
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model TopicVideo {
  id                   String                 @id(map: "ThematicVideo_pkey") @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  title                String
  description          String?
  profileSharerId      String                 @db.Uuid
  muxAssetId           String?                @unique(map: "ThematicVideo_muxAssetId_key")
  muxPlaybackId        String?                @unique(map: "ThematicVideo_muxPlaybackId_key")
  muxUploadId          String?                @unique(map: "ThematicVideo_muxUploadId_key")
  passthrough          String?                @unique(map: "ThematicVideo_passthrough_key")
  duration             Float?
  aspectRatio          String?
  videoQuality         String?
  maxWidth             Decimal?               @db.Decimal
  maxHeight            Decimal?               @db.Decimal
  maxFrameRate         Decimal?               @db.Decimal
  languageCode         String?
  resolutionTier       String?
  url                  String
  metadata             Json?
  airtableRecordId     String?
  createdAt            DateTime?              @default(now()) @db.Timestamptz(6)
  updatedAt            DateTime?              @default(now()) @db.Timestamptz(6)
  promptCategoryId     String?                @db.Uuid
  summary              String?
  status               VideoStatus            @default(WAITING)
  errorMessage         String?
  dateRecorded         DateTime?              @default(now()) @db.Timestamptz(6)
  ProfileSharer        ProfileSharer          @relation(fields: [profileSharerId], references: [id], onDelete: Cascade, map: "ThematicVideo_profileSharerId_fkey")
  PromptCategory       PromptCategory?        @relation(fields: [promptCategoryId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  TopicVideoTranscript TopicVideoTranscript[]
  PromptResponse       PromptResponse[]       @relation("PromptResponseToThematicVideo")
}

model TopicVideoTranscript {
  id           String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  topicVideoId String     @db.Uuid
  transcript   String?
  createdAt    DateTime?  @default(now()) @db.Timestamptz(6)
  updatedAt    DateTime?  @default(now()) @db.Timestamptz(6)
  source       String?
  type         String?
  language     String?
  name         String?
  muxTrackId   String?
  muxAssetId   String?
  TopicVideo   TopicVideo @relation(fields: [topicVideoId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([topicVideoId], map: "idx_topicvideotranscript_topicvideoid")
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model VideoDownload {
  id             String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  profileId      String    @db.Uuid
  muxAssetId     String
  quality        String    @default("high")
  downloadedAt   DateTime  @default(now()) @db.Timestamptz(6)
  status         String?   @default("preparing")
  retries        Int?      @default(0)
  last_attempted DateTime? @default(now()) @db.Timestamptz(6)
  Profile        Profile   @relation(fields: [profileId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([profileId, downloadedAt])
}

model TopicVideoDownload {
  id             String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  profileId      String    @db.Uuid
  muxAssetId     String
  quality        String    @default("high")
  downloadedAt   DateTime? @default(now()) @db.Timestamptz(6)
  status         String?   @default("preparing")
  retries        Int?      @default(0)
  last_attempted DateTime? @default(now()) @db.Timestamptz(6)
  Profile        Profile   @relation(fields: [profileId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([profileId, downloadedAt])
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model FollowRequest {
  id            String                @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  sharerId      String                @db.Uuid
  requestorId   String                @db.Uuid
  status        follow_request_status @default(PENDING)
  createdAt     DateTime?             @default(now()) @db.Timestamptz(6)
  updatedAt     DateTime?             @default(now()) @db.Timestamptz(6)
  approvedAt    DateTime?             @db.Timestamptz(6)
  deniedAt      DateTime?             @db.Timestamptz(6)
  Profile       Profile               @relation(fields: [requestorId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  ProfileSharer ProfileSharer         @relation(fields: [sharerId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([sharerId, requestorId], map: "unique_follow_request")
  @@index([requestorId], map: "idx_follow_request_requestor")
  @@index([sharerId], map: "idx_follow_request_sharer")
  @@index([status], map: "idx_follow_request_status")
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model Notification {
  id        String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  userId    String   @db.Uuid
  type      String
  message   String
  data      Json?
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now()) @db.Timestamptz(6)
  updatedAt DateTime @default(now()) @db.Timestamptz(6)
  Profile   Profile  @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_notification_user")

  @@index([userId], map: "idx_notification_userid")
  @@index([createdAt], map: "notification_created_at_idx")
  @@index([userId], map: "notification_user_id_idx")
}

enum InvitationStatus {
  PENDING
  ACCEPTED
  DECLINED
  EXPIRED
}

enum Role {
  LISTENER
  SHARER
  EXECUTOR
  ADMIN
}

enum Theme {
  LIFE_EXPERIENCES
  HEALTH_AND_WELLBEING
  WELLBEING
  BUSINESS
  FOOD
  CUSTOM
  VALUES_AND_BELIEFS
  PERSONAL_HISTORY
  CAREER_AND_EDUCATION
  CHALLENGES_AND_RESILIENCE
  RELATIONSHIPS_AND_COMMUNITY
  HOBBIES_AND_INTERESTS
  CULTURAL_AND_HERITAGE
}

enum VideoStatus {
  WAITING
  PREPARING
  ASSET_CREATED
  READY
  ERRORED
}

enum person_relation {
  Spouse
  Partner
  Mother
  Father
  Sister
  Brother
  Daughter
  Son
  Grandmother
  Grandfather
  GreatGrandmother
  GreatGrandfather
  Granddaughter
  Grandson
  GreatGranddaughter
  GreatGrandson
  Aunt
  Uncle
  GreatAunt
  GreatUncle
  Niece
  Nephew
  Cousin
  Friend
  Coworker
  Mentor
  Teacher
  Boss
  MotherInLaw
  FatherInLaw
  SisterInLaw
  BrotherInLaw
  StepMother
  StepFather
  StepSister
  StepBrother
  StepDaughter
  StepSon
  Godmother
  Godfather
  Godchild
  Other
}

enum follow_request_status {
  PENDING
  APPROVED
  DENIED
}
