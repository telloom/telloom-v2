generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
}

datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
  directUrl  = env("DIRECT_URL")
  extensions = [uuid_ossp(map: "uuid-ossp", schema: "extensions")]
}

model Entitlement {
  id                       String                    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  revenuecatId             String
  lookupKey                String
  displayName              String
  createdAt                DateTime?                 @default(now()) @db.Timestamptz(6)
  updatedAt                DateTime?                 @default(now()) @db.Timestamptz(6)
  subscriptionEntitlements SubscriptionEntitlement[]
}

model ObjectCategory {
  id               String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  categoryName     String
  description      String?
  airtableRecordId String?
  createdAt        DateTime? @default(now()) @db.Timestamptz(6)
  updatedAt        DateTime? @default(now()) @db.Timestamptz(6)
  objects          Object[]
}

model Object {
  id                String          @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId            String?         @db.Uuid
  objectName        String
  objectDescription String?
  airtableRecordId  String?
  createdAt         DateTime?       @default(now()) @db.Timestamptz(6)
  updatedAt         DateTime?       @db.Timestamptz(6)
  promptResponseId  String?         @db.Uuid
  categoryId        String?         @db.Uuid
  category          ObjectCategory? @relation(fields: [categoryId], references: [id], onDelete: NoAction)
  promptResponse    PromptResponse? @relation(fields: [promptResponseId], references: [id], onDelete: NoAction)
}

model Offering {
  id           String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  revenuecatId String
  lookupKey    String
  displayName  String
  isCurrent    Boolean
  createdAt    DateTime? @default(now()) @db.Timestamptz(6)
  updatedAt    DateTime? @default(now()) @db.Timestamptz(6)
  packages     Package[]
}

model Package {
  id           String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  revenuecatId String
  offeringId   String?   @db.Uuid
  productId    String?   @db.Uuid
  lookupKey    String
  displayName  String
  position     Int?
  createdAt    DateTime? @default(now()) @db.Timestamptz(6)
  updatedAt    DateTime? @default(now()) @db.Timestamptz(6)
  offering     Offering? @relation(fields: [offeringId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  product      Product?  @relation(fields: [productId], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model Product {
  id              String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  revenuecatId    String
  storeIdentifier String
  type            String
  displayName     String?
  createdAt       DateTime?      @default(now()) @db.Timestamptz(6)
  updatedAt       DateTime?      @default(now()) @db.Timestamptz(6)
  packages        Package[]
  purchases       Purchase[]
  subscriptions   Subscription[]
}

model Profile {
  id                            String                          @id @default(uuid()) @db.Uuid
  fullName                      String?
  username                      String?                         @unique
  avatarUrl                     String?
  email                         String?                         @unique
  passwordHash                  String?                         @unique
  firstName                     String?
  lastName                      String?
  phone                         String?
  revenuecatAppUserId           String?
  status                        String?
  airtableRecordId              String?
  addressStreet                 String?
  addressUnit                   String?
  addressCity                   String?
  addressState                  String?
  addressZipcode                String?
  executorFirstName             String?
  executorLastName              String?
  executorRelation              String?
  executorPhone                 String?
  executorEmail                 String?
  isAdmin                       Boolean                         @default(false)
  createdAt                     DateTime                        @default(now()) @db.Timestamptz(6)
  updatedAt                     DateTime                        @db.Timestamptz(6)
  receivedInvitations           Invitation[]                    @relation("InviteeToInvitation")
  sentInvitations               Invitation[]                    @relation("InviterToInvitation")
  executorForSharers            ProfileExecutor[]               @relation("ExecutorToSharers")
  followings                    ProfileListener[]               @relation("ListenerToSharers")
  roles                         ProfileRole[]
  profileSharer                 ProfileSharer?
  promptResponseFavorites       PromptResponseFavorite[]
  promptResponseRecentlyWatched PromptResponseRecentlyWatched[]
  topicFavorites                TopicFavorite[]
  topicQueueItems               TopicQueueItem[]
}

model ProfileRole {
  id        String  @id @default(uuid()) @db.Uuid
  profileId String  @db.Uuid
  role      Role
  profile   Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)

  @@unique([profileId, role])
}

model ProfileSharer {
  id                        String                     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  profileId                 String                     @unique @db.Uuid
  subscriptionStatus        Boolean
  createdAt                 DateTime                   @default(now()) @db.Timestamptz(6)
  sentInvitations           Invitation[]               @relation("SharerToInvitation")
  executorAssignment        ProfileExecutor?           @relation("SharerToExecutor")
  followers                 ProfileListener[]          @relation("SharerToListeners")
  profile                   Profile                    @relation(fields: [profileId], references: [id], onDelete: Cascade)
  promptResponses           PromptResponse[]
  promptResponseAttachments PromptResponseAttachment[]
  thematicVideos            ThematicVideo[]
  videos                    Video[]
}

model ProfileExecutor {
  id         String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  sharerId   String        @unique @db.Uuid
  executorId String        @db.Uuid
  createdAt  DateTime      @default(now()) @db.Timestamptz(6)
  executor   Profile       @relation("ExecutorToSharers", fields: [executorId], references: [id], onDelete: Cascade)
  sharer     ProfileSharer @relation("SharerToExecutor", fields: [sharerId], references: [id], onDelete: Cascade)
}

model ProfileListener {
  id                    String           @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  listenerId            String           @db.Uuid
  sharerId              String           @db.Uuid
  sharedSince           DateTime         @default(now()) @db.Timestamptz(6)
  hasAccess             Boolean          @default(true)
  lastViewed            DateTime?
  notifications         Boolean          @default(true)
  createdAt             DateTime         @default(now()) @db.Timestamptz(6)
  updatedAt             DateTime         @db.Timestamptz(6)
  listener              Profile          @relation("ListenerToSharers", fields: [listenerId], references: [id], onDelete: Cascade)
  sharer                ProfileSharer    @relation("SharerToListeners", fields: [sharerId], references: [id], onDelete: Cascade)
  viewedPromptResponses PromptResponse[] @relation("ListenerPromptViews")
  viewedVideos          Video[]          @relation("ListenerVideoViews")

  @@unique([listenerId, sharerId])
}

model Invitation {
  id           String           @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  sharerId     String           @db.Uuid
  inviterId    String?          @db.Uuid
  inviteeEmail String
  role         Role
  status       InvitationStatus @default(PENDING)
  token        String           @unique
  createdAt    DateTime         @default(now()) @db.Timestamptz(6)
  updatedAt    DateTime         @db.Timestamptz(6)
  acceptedAt   DateTime?
  invitee      Profile          @relation("InviteeToInvitation", fields: [inviteeEmail], references: [email])
  inviter      Profile?         @relation("InviterToInvitation", fields: [inviterId], references: [id], onDelete: Cascade)
  sharer       ProfileSharer    @relation("SharerToInvitation", fields: [sharerId], references: [id], onDelete: Cascade)

  @@unique([sharerId, inviteeEmail, role])
}

model PromptCategory {
  id          String           @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  category    String?
  description String?
  theme       Theme?
  airtableId  String?
  createdAt   DateTime?        @default(now()) @db.Timestamptz(6)
  updatedAt   DateTime?        @default(now()) @db.Timestamptz(6)
  prompts     Prompt[]
  favorites   TopicFavorite[]
  queueItems  TopicQueueItem[]
}

model TopicFavorite {
  id               String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  profileId        String         @db.Uuid
  promptCategoryId String         @db.Uuid
  createdAt        DateTime       @default(now()) @db.Timestamptz(6)
  profile          Profile        @relation(fields: [profileId], references: [id], onDelete: Cascade)
  promptCategory   PromptCategory @relation(fields: [promptCategoryId], references: [id], onDelete: Cascade)

  @@unique([profileId, promptCategoryId])
}

model TopicQueueItem {
  id               String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  profileId        String         @db.Uuid
  promptCategoryId String         @db.Uuid
  createdAt        DateTime       @default(now()) @db.Timestamptz(6)
  profile          Profile        @relation(fields: [profileId], references: [id], onDelete: Cascade)
  promptCategory   PromptCategory @relation(fields: [promptCategoryId], references: [id], onDelete: Cascade)

  @@unique([profileId, promptCategoryId])
}

model PromptResponseAttachment {
  id               String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  promptResponseId String         @db.Uuid
  profileSharerId  String         @db.Uuid
  fileUrl          String
  fileType         String
  fileName         String
  fileSize         Int?
  title            String?
  description      String?
  estimatedYear    Int?
  uploadedAt       DateTime       @default(now()) @db.Timestamptz(6)
  profileSharer    ProfileSharer  @relation(fields: [profileSharerId], references: [id], onDelete: NoAction)
  promptResponse   PromptResponse @relation(fields: [promptResponseId], references: [id], onDelete: Cascade)
}

model PromptResponse {
  id               String                          @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  profileSharerId  String                          @db.Uuid
  videoId          String?                         @db.Uuid
  responseText     String?
  privacyLevel     String                          @default("Private")
  createdAt        DateTime?                       @default(now()) @db.Timestamptz(6)
  updatedAt        DateTime?                       @db.Timestamptz(6)
  airtableRecordId String?
  promptId         String?                         @db.Uuid
  search_vector    Unsupported("tsvector")?
  objects          Object[]
  profileSharer    ProfileSharer                   @relation(fields: [profileSharerId], references: [id], onDelete: Cascade)
  prompt           Prompt?                         @relation(fields: [promptId], references: [id], onDelete: NoAction)
  video            Video?                          @relation(fields: [videoId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  attachments      PromptResponseAttachment[]
  favorites        PromptResponseFavorite[]
  recentlyWatched  PromptResponseRecentlyWatched[]
  permissions      ResponsePermission[]
  viewedBy         ProfileListener[]               @relation("ListenerPromptViews")
  thematicVideos   ThematicVideo[]                 @relation("PromptResponseToThematicVideo")

  @@index([search_vector], map: "prompt_response_search_idx", type: Gin)
}

model PromptResponseFavorite {
  id               String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  profileId        String         @db.Uuid
  promptResponseId String         @db.Uuid
  favoritedAt      DateTime       @default(now()) @db.Timestamptz(6)
  profile          Profile        @relation(fields: [profileId], references: [id], onDelete: Cascade)
  promptResponse   PromptResponse @relation(fields: [promptResponseId], references: [id], onDelete: Cascade)
}

model PromptResponseRecentlyWatched {
  id               String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  profileId        String         @db.Uuid
  promptResponseId String         @db.Uuid
  watchedAt        DateTime       @default(now()) @db.Timestamptz(6)
  profile          Profile        @relation(fields: [profileId], references: [id], onDelete: Cascade)
  promptResponse   PromptResponse @relation(fields: [promptResponseId], references: [id], onDelete: Cascade)
}

model Prompt {
  id                    String                   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  promptText            String                   @db.VarChar(255)
  promptType            String?                  @default("default") @db.VarChar(255)
  isContextEstablishing Boolean?                 @default(false)
  airtableId            String?                  @db.VarChar
  createdAt             DateTime?                @default(now()) @db.Timestamp(6)
  updatedAt             DateTime?                @default(now()) @db.Timestamp(6)
  promptCategoryId      String?                  @db.Uuid
  categoryAirtableId    String?                  @db.VarChar
  isObjectPrompt        Boolean?
  search_vector         Unsupported("tsvector")?
  promptCategory        PromptCategory?          @relation(fields: [promptCategoryId], references: [id], onDelete: NoAction)
  promptResponses       PromptResponse[]
  videos                Video[]

  @@index([search_vector], map: "prompt_search_idx", type: Gin)
}

model Purchase {
  id                      String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  revenuecatId            String
  userId                  String?   @db.Uuid
  productId               String?   @db.Uuid
  purchasedAt             DateTime  @db.Timestamptz(6)
  store                   String
  revenueInUsd            Decimal   @db.Decimal
  status                  String
  environment             String
  storePurchaseIdentifier String?
  createdAt               DateTime? @default(now()) @db.Timestamptz(6)
  updatedAt               DateTime? @default(now()) @db.Timestamptz(6)
  product                 Product?  @relation(fields: [productId], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model ResponsePermission {
  id              String          @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId          String?         @db.Uuid
  permissionLevel String
  createdAt       DateTime?       @default(now()) @db.Timestamptz(6)
  updatedAt       DateTime?       @default(now()) @db.Timestamptz(6)
  responseId      String?         @db.Uuid
  promptResponse  PromptResponse? @relation(fields: [responseId], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model SubscriptionEntitlement {
  id             String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  subscriptionId String       @db.Uuid
  entitlementId  String       @db.Uuid
  createdAt      DateTime?    @default(now()) @db.Timestamptz(6)
  updatedAt      DateTime?    @default(now()) @db.Timestamptz(6)
  entitlement    Entitlement  @relation(fields: [entitlementId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  subscription   Subscription @relation(fields: [subscriptionId], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model Subscription {
  id                          String                    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  revenuecatId                String
  userId                      String?                   @db.Uuid
  productId                   String?                   @db.Uuid
  startsAt                    DateTime                  @db.Timestamptz(6)
  currentPeriodStartsAt       DateTime                  @db.Timestamptz(6)
  currentPeriodEndsAt         DateTime?                 @db.Timestamptz(6)
  givesAccess                 Boolean
  autoRenewalStatus           String?
  status                      String
  store                       String
  environment                 String
  storeSubscriptionIdentifier String?
  createdAt                   DateTime?                 @default(now()) @db.Timestamptz(6)
  updatedAt                   DateTime?                 @default(now()) @db.Timestamptz(6)
  product                     Product?                  @relation(fields: [productId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  subscriptionEntitlements    SubscriptionEntitlement[]
}

model ThematicVideo {
  id               String           @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  title            String
  description      String?
  profileSharerId  String           @db.Uuid
  muxAssetId       String?          @unique
  muxPlaybackId    String?          @unique
  muxUploadId      String?          @unique
  passthrough      String?          @unique
  duration         Float?
  aspectRatio      String?
  videoQuality     String?
  maxWidth         Decimal?         @db.Decimal
  maxHeight        Decimal?         @db.Decimal
  maxFrameRate     Decimal?         @db.Decimal
  languageCode     String?
  resolutionTier   String?
  url              String
  metadata         Json?
  airtableRecordId String?
  createdAt        DateTime?        @default(now()) @db.Timestamptz(6)
  updatedAt        DateTime?        @default(now()) @db.Timestamptz(6)
  profileSharer    ProfileSharer    @relation(fields: [profileSharerId], references: [id], onDelete: Cascade)
  promptResponses  PromptResponse[] @relation("PromptResponseToThematicVideo")
}

model VideoTranscript {
  id         String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  videoId    String   @unique @db.Uuid
  transcript String
  createdAt  DateTime @default(now()) @db.Timestamptz(6)
  updatedAt  DateTime @db.Timestamptz(6)
  video      Video    @relation(fields: [videoId], references: [id], onDelete: Cascade)
}

model Video {
  id               String            @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  profileSharerId  String            @db.Uuid
  muxAssetId       String?           @unique
  muxPlaybackId    String?           @unique
  muxUploadId      String?           @unique
  passthrough      String?           @unique
  duration         Float?
  aspectRatio      String?
  videoQuality     String?
  maxWidth         Decimal?          @db.Decimal
  maxHeight        Decimal?          @db.Decimal
  maxFrameRate     Decimal?          @db.Decimal
  languageCode     String?
  resolutionTier   String?
  airtableRecordId String?
  promptId         String?           @db.Uuid
  createdAt        DateTime?         @default(now()) @db.Timestamptz(6)
  updatedAt        DateTime?         @default(now()) @db.Timestamptz(6)
  promptResponses  PromptResponse[]
  profileSharer    ProfileSharer     @relation(fields: [profileSharerId], references: [id], onDelete: Cascade)
  prompt           Prompt?           @relation(fields: [promptId], references: [id], onDelete: NoAction)
  videoTranscript  VideoTranscript?
  viewedBy         ProfileListener[] @relation("ListenerVideoViews")
}

enum Theme {
  LIFE_EXPERIENCES
  HEALTH_AND_WELLBEING
  WELLBEING
  BUSINESS
  FOOD
  CUSTOM
  VALUES_AND_BELIEFS
  PERSONAL_HISTORY
  CAREER_AND_EDUCATION
  CHALLENGES_AND_RESILIENCE
  RELATIONSHIPS_AND_COMMUNITY
  HOBBIES_AND_INTERESTS
  CULTURAL_AND_HERITAGE
}

enum Role {
  LISTENER
  SHARER
  EXECUTOR
  ADMIN
}

enum InvitationStatus {
  PENDING
  ACCEPTED
  DECLINED
  EXPIRED
}

enum VideoStatus {
  WAITING
  PREPARING
  ASSET_CREATED
  READY
  ERRORED
}
